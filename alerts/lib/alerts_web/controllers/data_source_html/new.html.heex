<h1>
  <%= link("Alerts", to: ~p"/alerts") %>
  &rarr;
  <%= link("Data sources", to: ~p"/data_sources") %>
  &rarr;
  <em>New Data Source</em>
</h1>

<div class="text-right hidden-print" style="margin-bottom: 20px;">
  <%= link("Create Data Source", to: "#", class: "btn action-bar-btn", id: "submit-btn", style: "border: 1px solid #28a745; color: #28a745; background: white;") %>
  <%= link(AlertsWeb.DataSourceHTML.render_test_icon(), to: "#", class: "btn-icon btn-icon-disabled action-bar-btn", id: "test-connection-btn", title: "Complete required fields to test connection", disabled: true) %>
</div>

<div style="background: white; padding: 15px; margin-bottom: 20px;">
  <svg width="16" height="16" fill="#ffc107" viewBox="0 0 16 16" style="vertical-align: middle; margin-right: 8px;">
    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
  </svg>
  <strong>Important Security Notice:</strong> The database user configured here should have <strong>read-only permissions</strong>. 
  While the application attempts to execute only safe SELECT queries, there is no guarantee that malicious users couldn't 
  inject SQL to alter or destroy data. Using a read-only database user provides essential protection against such attacks.
</div>

<div class="row">
  <div class="col-md-10">
    
    <%= form_for @changeset, ~p"/data_sources", fn f -> %>
      <div class="row">
        <div class="col-md-6">
          <div class="form-group">
            <%= label f, :name, class: "control-label" %>
            <%= text_input f, :name, class: "form-control", placeholder: "e.g., production_mysql" %>
            <%= error_tag f, :name %>
          </div>
        </div>
        <div class="col-md-6">
          <div class="form-group">
            <%= label f, :display_name, "Display Name", class: "control-label" %>
            <%= text_input f, :display_name, class: "form-control", placeholder: "e.g., Production MySQL Database" %>
            <%= error_tag f, :display_name %>
          </div>
        </div>
      </div>

      <div class="form-group">
        <%= label f, :driver, "ODBC Driver", class: "control-label" %>
        <%= select f, :driver, 
          @database_drivers ++ [{"Custom", ""}], 
          [prompt: "Select a driver", class: "form-control"] %>
        <%= error_tag f, :driver %>
      </div>

      <div class="row">
        <div class="col-md-6">
          <div class="form-group">
            <%= label f, :server, class: "control-label" %>
            <%= text_input f, :server, class: "form-control", placeholder: "localhost or IP" %>
            <%= error_tag f, :server %>
          </div>
        </div>
        <div class="col-md-3">
          <div class="form-group">
            <%= label f, :database, class: "control-label" %>
            <%= text_input f, :database, class: "form-control", placeholder: "Database name" %>
            <%= error_tag f, :database %>
          </div>
        </div>
        <div class="col-md-3">
          <div class="form-group">
            <%= label f, :port, class: "control-label" %>
            <%= number_input f, :port, class: "form-control", placeholder: "3306" %>
            <%= error_tag f, :port %>
          </div>
        </div>
      </div>

      <div class="row">
        <div class="col-md-6">
          <div class="form-group">
            <%= label f, :username, class: "control-label" %>
            <%= text_input f, :username, class: "form-control" %>
            <%= error_tag f, :username %>
          </div>
        </div>
        <div class="col-md-6">
          <div class="form-group">
            <%= label f, :password, class: "control-label" %>
            <%= password_input f, :password, class: "form-control" %>
            <%= error_tag f, :password %>
          </div>
        </div>
      </div>

      <div class="form-group">
        <%= label f, :additional_params, "Additional Parameters (JSON)", class: "control-label" %>
        <%= textarea f, :additional_params, class: "form-control", rows: 2, 
            placeholder: ~s|{"CHARSET": "UTF8", "SSLMODE": "required"}| %>
        <%= error_tag f, :additional_params %>
      </div>
    <% end %>
  </div>
</div>

<script>
// Form validation function
function validateForm() {
  const requiredFields = [
    'data_source[name]',
    'data_source[display_name]', 
    'data_source[driver]',
    'data_source[server]',
    'data_source[database]',
    'data_source[username]'
  ];
  
  const testBtn = document.getElementById('test-connection-btn');
  let allValid = true;
  
  for (const fieldName of requiredFields) {
    const field = document.querySelector(`[name="${fieldName}"]`);
    if (!field || !field.value.trim()) {
      allValid = false;
      break;
    }
  }
  
  if (allValid) {
    testBtn.classList.remove('btn-icon-disabled');
    testBtn.classList.add('btn-icon-info');
    testBtn.title = 'Test connection';
    testBtn.style.pointerEvents = 'auto';
    testBtn.style.cursor = 'pointer';
  } else {
    testBtn.classList.remove('btn-icon-info');
    testBtn.classList.add('btn-icon-disabled');
    testBtn.title = 'Complete required fields to test connection';
    testBtn.style.pointerEvents = 'none';
    testBtn.style.cursor = 'not-allowed';
  }
}

// Add event listeners to form fields
document.addEventListener('DOMContentLoaded', function() {
  const formFields = document.querySelectorAll('input, select, textarea');
  formFields.forEach(field => {
    field.addEventListener('input', validateForm);
    field.addEventListener('change', validateForm);
  });
  
  // Initial validation
  validateForm();
});

document.getElementById('submit-btn').addEventListener('click', function(e) {
  e.preventDefault();
  document.querySelector('form').submit();
});

document.getElementById('test-connection-btn').addEventListener('click', function(e) {
  e.preventDefault();
  
  const btn = this;
  const originalContent = btn.innerHTML;
  btn.innerHTML = '<svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: middle;" class="spinner"><circle cx="8" cy="8" r="7" fill="none" stroke="currentColor" stroke-width="2" stroke-dasharray="31.416" stroke-dashoffset="31.416"><animate attributeName="stroke-dasharray" dur="2s" values="0 31.416;15.708 15.708;0 31.416" repeatCount="indefinite"/><animate attributeName="stroke-dashoffset" dur="2s" values="0;-15.708;-31.416" repeatCount="indefinite"/></circle></svg>';
  btn.disabled = true;
  
  // Get CSRF token
  const existingForm = document.querySelector('form');
  const csrfToken = existingForm.querySelector('input[name="_csrf_token"]').value;
  
  // Gather form data
  const portValue = document.querySelector('input[name="data_source[port]"]').value;
  const formData = {
    _csrf_token: csrfToken,
    data_source: {
      name: document.querySelector('input[name="data_source[name]"]').value,
      display_name: document.querySelector('input[name="data_source[display_name]"]').value,
      driver: document.querySelector('select[name="data_source[driver]"]').value,
      server: document.querySelector('input[name="data_source[server]"]').value,
      database: document.querySelector('input[name="data_source[database]"]').value,
      username: document.querySelector('input[name="data_source[username]"]').value,
      password: document.querySelector('input[name="data_source[password]"]').value,
      port: portValue ? parseInt(portValue, 10) : null,
      additional_params: document.querySelector('textarea[name="data_source[additional_params]"]').value
    }
  };
  
  fetch('/data_sources/test_ajax', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-Requested-With': 'XMLHttpRequest',
      'X-CSRF-Token': csrfToken
    },
    body: JSON.stringify(formData)
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return response.json();
  })
  .then(data => {
    btn.innerHTML = originalContent;
    btn.disabled = false;
    
    // Show flash message at top of form
    showFlashMessage(data.success ? 'info' : 'error', data.message);
  })
  .catch(error => {
    btn.innerHTML = originalContent;
    btn.disabled = false;
    console.error('Test connection error:', error);
    showFlashMessage('error', 'Error testing connection: ' + error.message);
  });
});

function showFlashMessage(type, message) {
  // Remove any existing dynamic flash messages
  const existingDynamicFlash = document.querySelector('.alert.dynamic-flash');
  if (existingDynamicFlash) {
    existingDynamicFlash.remove();
  }
  
  // Create new flash message for connection test results
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert alert-${type === 'info' ? 'info' : 'danger'} dynamic-flash`;
  alertDiv.setAttribute('role', 'alert');
  alertDiv.innerHTML = `<p>${message}</p>`;
  
  // Insert at the beginning of the form container
  const formContainer = document.querySelector('.col-md-10');
  const form = formContainer.querySelector('form');
  formContainer.insertBefore(alertDiv, form);
  
  // Auto-hide after 5 seconds
  setTimeout(() => {
    if (alertDiv.parentNode) {
      alertDiv.remove();
    }
  }, 5000);
}
</script>