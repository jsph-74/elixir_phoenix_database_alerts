#!/bin/bash
set -e

# Get environment parameter (default: dev)
ENV="${1:-dev}"

# Source shared functions
source "$(dirname "$0")/../functions.sh"

echo "üîÑ Generating docker-compose-${ENV}.yaml from template..."

# Get ports for environment
HTTP_PORT=$(get_http_port "$ENV")
HTTPS_PORT=$(get_https_port "$ENV")

# Set database port based on environment
case "$ENV" in
    dev) DB_PORT="5430" ;;
    test) DB_PORT="5431" ;;
    prod) DB_PORT="5432" ;;
    *) DB_PORT="5432" ;;
esac


# Check if required secret variables are set
if [ -z "$ENCRYPTION_SECRET_NAME" ] || [ -z "$SECRET_SECRET_NAME" ]; then
    print_status "‚ùå Secret names not set. Run secrets.sh first" $RED
    exit 1
fi

# Master password secret is optional - use placeholder if not set
MASTER_PASSWORD_SECRET_NAME="${MASTER_PASSWORD_SECRET_NAME:-master_password_placeholder}"

# Generate environment-specific docker-compose file from template
# Use multiple sed commands to avoid character escaping issues
cp docker-compose.tpl.yaml docker-compose-${ENV}.yaml

# Add auto-generation notice at the top
sed -i "" "1i\\
# WARNING: This file is auto-generated from docker-compose.tpl.yaml\\
# Do not edit this file directly. Edit the template instead.\\
# Generated on $(date) for environment: ${ENV}\\
" docker-compose-${ENV}.yaml
sed -i "" "s/{{ENV}}/$ENV/g" docker-compose-${ENV}.yaml
sed -i "" "s/{{HTTP_PORT}}/$HTTP_PORT/g" docker-compose-${ENV}.yaml
sed -i "" "s/{{HTTPS_PORT}}/$HTTPS_PORT/g" docker-compose-${ENV}.yaml
sed -i "" "s/{{DB_PORT}}/$DB_PORT/g" docker-compose-${ENV}.yaml
sed -i "" "s/{{DATABASE_NAME}}/alerts_$ENV/g" docker-compose-${ENV}.yaml
sed -i "" "s/{{ENCRYPTION_SECRET_NAME}}/$ENCRYPTION_SECRET_NAME/g" docker-compose-${ENV}.yaml
sed -i "" "s/{{SECRET_SECRET_NAME}}/$SECRET_SECRET_NAME/g" docker-compose-${ENV}.yaml
sed -i "" "s/{{MASTER_PASSWORD_SECRET_NAME}}/$MASTER_PASSWORD_SECRET_NAME/g" docker-compose-${ENV}.yaml

# Handle ENCRYPTION_KEY_VALUE separately with a different delimiter to avoid base64 issues
sed -i "" "s|{{ENCRYPTION_KEY_VALUE}}|$ENCRYPTION_KEY|g" docker-compose-${ENV}.yaml

# Handle conditional sections based on environment
if [ "$ENV" = "dev" ] || [ "$ENV" = "test" ]; then
    # Include Playwright section for dev/test
    sed -i "" "s/{{IF_DEV_TEST}}//g" docker-compose-${ENV}.yaml
    sed -i "" "s/{{END_IF_DEV_TEST}}//g" docker-compose-${ENV}.yaml
else
    # Remove Playwright section for production
    sed -i "" "/{{IF_DEV_TEST}}/,/{{END_IF_DEV_TEST}}/d" docker-compose-${ENV}.yaml
fi

print_status "‚úÖ Generated docker-compose-${ENV}.yaml with:" $GREEN
echo "  ‚Ä¢ Environment: $ENV"
echo "  ‚Ä¢ HTTP Port: $HTTP_PORT"  
echo "  ‚Ä¢ HTTPS Port: $HTTPS_PORT"
echo "  ‚Ä¢ Database Port: $DB_PORT"
echo "  ‚Ä¢ Encryption Secret: $ENCRYPTION_SECRET_NAME"
echo "  ‚Ä¢ Secret Key Secret: $SECRET_SECRET_NAME"
echo "  ‚Ä¢ Master Password Secret: $MASTER_PASSWORD_SECRET_NAME"